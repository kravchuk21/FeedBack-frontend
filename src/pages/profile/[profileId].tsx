import type {GetServerSideProps, NextPage,} from 'next'
import Head from 'next/head'
import React from 'react'
import Avatar from '../../components/Avatar'
import Title from '../../components/UI/Title'
import {getUserById,} from '../../store/services/UserService'
import {wrapper,} from '../../store/store'
import {UserInterface,} from '../../interfaces/user.interface'
import {useAppSelector,} from '../../store/hooks'
import {selectUserId,} from '../../store/reducers/user'
import IconButton from '../../components/UI/IconButton'
import SettingsIcon from '../../../public/assets/icons/settings.svg'
import GoBack from '../../components/GoBack'
import Link from 'next/link'
import {Routes,} from '../../constants/routes'
import TextLink from '../../components/Link'
import Header from '../../layout/Header'
import Typography from '../../components/UI/Typography'
import {dateFormat,} from '../../utils/dateFormat'
import Button from '../../components/UI/Button'
import {socket,} from '../../store/services/socket'

interface ProfilePageProps {
	data: UserInterface;
}

const Profile: NextPage<ProfilePageProps> = ({data,}) => {
	const myId = useAppSelector(selectUserId)
	const isMe = data._id === myId

	const handleClick = () => {
		if (data) {
			socket.emit('MESSAGE:CREATE', {text: 'Hello ðŸ‘‹', mate: data._id,})
		}
	}

	return (
		<div>
			<Head>
				<title>FeedBack | {data?.fullName}</title>
				<meta name="description" content="Generated by create next app"/>
				<link rel="icon" href="/public/favicon.ico"/>
			</Head>
			<ProfileHeader isMe={isMe}/>

			<div className="flex flex-col items-center m-3.5">
				<div className="mb-3.5">
					<Avatar fullName={data.fullName} avatarUrl={data.avatar}/>
				</div>
				<Title textAlign="center" size={20}>{data.fullName}</Title>
				<Typography>Account created at:</Typography>
				<Typography>{dateFormat(data.createdAt)}</Typography>
				<TextLink href={`mailto:${data.email}`}>{data.email}</TextLink>
				{!isMe && <div className="m-10">
                    <Button onClick={handleClick}>Say hello ðŸ‘‹</Button>
                </div>}
			</div>
		</div>
	)
}


interface ProfileHeader {
	isMe: boolean
}

const ProfileHeader: React.FC<ProfileHeader> = React.memo(({isMe,}) => <Header>
	<GoBack/>
	{isMe && (
		<Link href={Routes.SETTINGS}>
			<a>
				<IconButton Icon={SettingsIcon}/>
			</a>
		</Link>
	)}
</Header>)


export const getServerSideProps: GetServerSideProps = wrapper.getServerSideProps(store => async (context) => {
	const userId = context.params?.profileId

	if (!userId) {
		return {notFound: true,}
	}

	if (typeof userId === 'string') {
		const {data,} = await store.dispatch(getUserById.initiate(userId))

		if (!data) {
			return {notFound: true,}
		} else {
			return {
				props: {data,},
			}
		}

	} else {
		return {notFound: true,}
	}
})

export default Profile

//TODO: .container layout
